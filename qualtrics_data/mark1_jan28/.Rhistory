install.packages("tidyverse")
install.packages("lme4")
install.packages(c("backports", "bayestestR", "BH", "blob", "boot", "broom", "callr", "car", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "conquer", "corrplot", "cowplot", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "effectsize", "ellipsis", "emmeans", "fansi", "farver", "forcats", "foreign", "generics", "ggplot2", "ggrepel", "ggsignif", "glue", "haven", "highr", "hms", "htmltools", "insight", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lifecycle", "lme4", "lmerTest", "lubridate", "magrittr", "maptools", "MASS", "Matrix", "MatrixModels", "matrixStats", "mgcv", "mime", "mvtnorm", "nlme", "nnet", "openssl", "openxlsx", "parameters", "pbkrtest", "pillar", "pkgbuild", "pkgload", "processx", "ps", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "reprex", "rio", "rlang", "rmarkdown", "rprojroot", "rstatix", "rstudioapi", "rvest", "sp", "SparseM", "spatial", "statmod", "stringi", "survey", "survival", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "viridisLite", "withr", "xfun", "zip"))
## Queer Speech Data Analysis and Visualization Treasure Trove
## Author: Ben Lang, blang@ucsd.edu
# library(lmerTest)
library(plyr)
library(dplyr) # this checks for normality
# library(ggpubr) # this plots normality
library(magrittr)
# library(effects)
# library(ggplot2)
library(tidyr)
# library(scales)
library(reshape2)
# library(lme4)
# library(emmeans)
library(forcats)
# library(psycho)
library(tibble)
library(janitor)
library(data.table)
setwd('/Users/bcl/Documents/GitHub/queer_speech/qualtrics_data/mark1_jan28/')
options(stringsAsFactors=F)
queer = read.csv('/Volumes/GoogleDrive/My Drive/Comps/qualtrics_data/mark1_jan28/queer-speech_February 12, 2022_18.43.csv')
#cleaning data down to just ratings, trial type, and stimulus ID
# queer <- subset(queer, Status == 0 | Status == "Response Type") # just for if there's people that don't complete the survey
queer <- select(queer, -contains(c("First.Click","Last.Click","Page.Submit","Click.Count"))) # remove all the time counts, can add in later if needed
# queer$Participant <- 1:nrow(queer)-1
queer <- select(queer, -c(StartDate, EndDate, ResponseId, UserLanguage, Consent, HC1, HC2, RecipientLastName, RecipientFirstName, RecipientEmail, ExternalReference, LocationLatitude, LocationLongitude, DistributionChannel, IPAddress, Progress, Status, Finished, RecordedDate, Duration..in.seconds.))
queer <- select(queer, -c(P1_1:P5_1)) # eliminate practice questions
queer <- select(queer, -c(D1:id)) # eliminate practice questions
# queer <- queer %>% relocate(D2:Q47, .before = 1)
# queer <- queer %>% relocate(Q56, .before = 1)
queer <- queer[-2,]
queer[1,] <- gsub(".*- (.+) -.*", "\\1", queer[1,]) # works on iMac, for some reason not on laptop, supposed to just grab URLs
queer <- add_column(queer, Participant = 1:nrow(queer)-1, .before = 1)
# splitting dfs to then concatenate
queer_qid <- queer[-1,]
queer_qid_long <- queer_qid %>% gather(Qualtrics_Trial_Num, Rating, X1_Q36_1:X33_Q62_1)
#queer[1,] <- queer %>% separate(X1_Q36_1:X33_Q62_1, Question, Token)
queer_stimname <- row_to_names(queer, row_number = 1)
names(queer_stimname)[names(queer_stimname) == '0'] <- 'Participant'
names(queer_stimname) <- make.unique(names(queer_stimname), sep="*")
queer_stimname_long <- queer_stimname %>% gather(Trial_Type, Rating, -Participant)
# must be same length
nrow(queer_qid_long)
nrow(queer_stimname_long)
# remove duplicates columns from one, then merge together
queer_qid_long <- select(queer_qid_long, -c(Participant, Rating))
merged_queer <- bind_cols(queer_stimname_long, queer_qid_long)
merged_queer$Qualtrics_Trial_Num[merged_queer$Qualtrics_Trial_Num %like% "Q36"] <- 'gender_id'
merged_queer$Qualtrics_Trial_Num[merged_queer$Qualtrics_Trial_Num %like% "Q60"] <- 'gender_id'
merged_queer$Qualtrics_Trial_Num[merged_queer$Qualtrics_Trial_Num %like% "Q29"] <- 'sexual_orientation'
merged_queer$Qualtrics_Trial_Num[merged_queer$Qualtrics_Trial_Num %like% "Q61"] <- 'sexual_orientation'
merged_queer$Qualtrics_Trial_Num[merged_queer$Qualtrics_Trial_Num %like% "Q30"] <- 'voice_id'
merged_queer$Qualtrics_Trial_Num[merged_queer$Qualtrics_Trial_Num %like% "Q62"] <- 'voice_id'
names(merged_queer)[names(merged_queer) == 'Qualtrics_Trial_Num'] <- 'Condition'
matches = read.csv('matches_queer_speech.csv')
merged_queer <- merged_queer %>% mutate(Trial_Type = gsub("\\*1", "", Trial_Type))
merged_queer <- merged_queer %>% mutate(Trial_Type = gsub("\\*2", "", Trial_Type))
matched_queer <- join(merged_queer, matches, by = "Trial_Type")
matched_queer <- select(matched_queer, -c(url, id, X, Trial_Type))
names(matched_queer)[names(matched_queer) == 'phon'] <- 'WAV'
matched_queer$Rating <- as.numeric(matched_queer$Rating)
### The plot thickens
ggplot(matched_queer, aes)
write.csv(matched_queer, "/Users/bcl/Documents/GitHub/queer_speech/qualtrics_data/mark1_jan28/matched_queer.csv", row.names=FALSE)
# write.csv(queer_stimname, "/Users/bcl/Documents/GitHub/queer_speech/qualtrics_data/mark1_jan28/queer_stimname.csv", row.names=FALSE)
